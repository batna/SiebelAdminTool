<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class BatnaBundleArchiSiebelBundleEntityHostProxy extends \Batna\Bundle\ArchiSiebelBundle\Entity\Host implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setHostname($hostname)
    {
        $this->__load();
        return parent::setHostname($hostname);
    }

    public function getHostname()
    {
        $this->__load();
        return parent::getHostname();
    }

    public function __toString()
    {
        $this->__load();
        return parent::__toString();
    }

    public function setIp($ip)
    {
        $this->__load();
        return parent::setIp($ip);
    }

    public function getIp()
    {
        $this->__load();
        return parent::getIp();
    }

    public function setType($type)
    {
        $this->__load();
        return parent::setType($type);
    }

    public function getType()
    {
        $this->__load();
        return parent::getType();
    }

    public function setOs($os)
    {
        $this->__load();
        return parent::setOs($os);
    }

    public function getOs()
    {
        $this->__load();
        return parent::getOs();
    }

    public function setRam($ram)
    {
        $this->__load();
        return parent::setRam($ram);
    }

    public function getRam()
    {
        $this->__load();
        return parent::getRam();
    }

    public function setCpuCore($cpuCore)
    {
        $this->__load();
        return parent::setCpuCore($cpuCore);
    }

    public function getCpuCore()
    {
        $this->__load();
        return parent::getCpuCore();
    }

    public function setCpuFrequency($cpuFrequency)
    {
        $this->__load();
        return parent::setCpuFrequency($cpuFrequency);
    }

    public function getCpuFrequency()
    {
        $this->__load();
        return parent::getCpuFrequency();
    }

    public function setParent($parent)
    {
        $this->__load();
        return parent::setParent($parent);
    }

    public function getParent()
    {
        $this->__load();
        return parent::getParent();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'hostname', 'ip', 'type', 'os', 'ram', 'cpuCore', 'cpuFrequency', 'parent');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}